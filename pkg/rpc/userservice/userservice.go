// Code generated by Kitex v0.6.1. DO NOT EDIT.

package userservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	rpc "github.com/yanguiyuan/cloudspace/pkg/rpc"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*rpc.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"UserLogin":           kitex.NewMethodInfo(userLoginHandler, newUserServiceUserLoginArgs, newUserServiceUserLoginResult, false),
		"UserRegister":        kitex.NewMethodInfo(userRegisterHandler, newUserServiceUserRegisterArgs, newUserServiceUserRegisterResult, false),
		"GetUser":             kitex.NewMethodInfo(getUserHandler, newUserServiceGetUserArgs, newUserServiceGetUserResult, false),
		"UpdateUser":          kitex.NewMethodInfo(updateUserHandler, newUserServiceUpdateUserArgs, newUserServiceUpdateUserResult, false),
		"GetUsers":            kitex.NewMethodInfo(getUsersHandler, newUserServiceGetUsersArgs, newUserServiceGetUsersResult, false),
		"QueryUsersInBatches": kitex.NewMethodInfo(queryUsersInBatchesHandler, newUserServiceQueryUsersInBatchesArgs, newUserServiceQueryUsersInBatchesResult, false),
		"ResetPassword":       kitex.NewMethodInfo(resetPasswordHandler, newUserServiceResetPasswordArgs, newUserServiceResetPasswordResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "rpc",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.1",
		Extra:           extra,
	}
	return svcInfo
}

func userLoginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.UserServiceUserLoginArgs)
	realResult := result.(*rpc.UserServiceUserLoginResult)
	success, err := handler.(rpc.UserService).UserLogin(ctx, realArg.Username, realArg.Password)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newUserServiceUserLoginArgs() interface{} {
	return rpc.NewUserServiceUserLoginArgs()
}

func newUserServiceUserLoginResult() interface{} {
	return rpc.NewUserServiceUserLoginResult()
}

func userRegisterHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.UserServiceUserRegisterArgs)
	realResult := result.(*rpc.UserServiceUserRegisterResult)
	success, err := handler.(rpc.UserService).UserRegister(ctx, realArg.Username, realArg.Password)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newUserServiceUserRegisterArgs() interface{} {
	return rpc.NewUserServiceUserRegisterArgs()
}

func newUserServiceUserRegisterResult() interface{} {
	return rpc.NewUserServiceUserRegisterResult()
}

func getUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.UserServiceGetUserArgs)
	realResult := result.(*rpc.UserServiceGetUserResult)
	success, err := handler.(rpc.UserService).GetUser(ctx, realArg.Id)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceGetUserArgs() interface{} {
	return rpc.NewUserServiceGetUserArgs()
}

func newUserServiceGetUserResult() interface{} {
	return rpc.NewUserServiceGetUserResult()
}

func updateUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.UserServiceUpdateUserArgs)

	err := handler.(rpc.UserService).UpdateUser(ctx, realArg.User)
	if err != nil {
		return err
	}

	return nil
}
func newUserServiceUpdateUserArgs() interface{} {
	return rpc.NewUserServiceUpdateUserArgs()
}

func newUserServiceUpdateUserResult() interface{} {
	return rpc.NewUserServiceUpdateUserResult()
}

func getUsersHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.UserServiceGetUsersArgs)
	realResult := result.(*rpc.UserServiceGetUsersResult)
	success, err := handler.(rpc.UserService).GetUsers(ctx, realArg.Offset, realArg.Limit)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceGetUsersArgs() interface{} {
	return rpc.NewUserServiceGetUsersArgs()
}

func newUserServiceGetUsersResult() interface{} {
	return rpc.NewUserServiceGetUsersResult()
}

func queryUsersInBatchesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.UserServiceQueryUsersInBatchesArgs)
	realResult := result.(*rpc.UserServiceQueryUsersInBatchesResult)
	success, err := handler.(rpc.UserService).QueryUsersInBatches(ctx, realArg.Ids)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceQueryUsersInBatchesArgs() interface{} {
	return rpc.NewUserServiceQueryUsersInBatchesArgs()
}

func newUserServiceQueryUsersInBatchesResult() interface{} {
	return rpc.NewUserServiceQueryUsersInBatchesResult()
}

func resetPasswordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.UserServiceResetPasswordArgs)

	err := handler.(rpc.UserService).ResetPassword(ctx, realArg.Id, realArg.Password)
	if err != nil {
		return err
	}

	return nil
}
func newUserServiceResetPasswordArgs() interface{} {
	return rpc.NewUserServiceResetPasswordArgs()
}

func newUserServiceResetPasswordResult() interface{} {
	return rpc.NewUserServiceResetPasswordResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) UserLogin(ctx context.Context, username string, password string) (r int64, err error) {
	var _args rpc.UserServiceUserLoginArgs
	_args.Username = username
	_args.Password = password
	var _result rpc.UserServiceUserLoginResult
	if err = p.c.Call(ctx, "UserLogin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserRegister(ctx context.Context, username string, password string) (r int64, err error) {
	var _args rpc.UserServiceUserRegisterArgs
	_args.Username = username
	_args.Password = password
	var _result rpc.UserServiceUserRegisterResult
	if err = p.c.Call(ctx, "UserRegister", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUser(ctx context.Context, id int64) (r *rpc.User, err error) {
	var _args rpc.UserServiceGetUserArgs
	_args.Id = id
	var _result rpc.UserServiceGetUserResult
	if err = p.c.Call(ctx, "GetUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateUser(ctx context.Context, user *rpc.User) (err error) {
	var _args rpc.UserServiceUpdateUserArgs
	_args.User = user
	var _result rpc.UserServiceUpdateUserResult
	if err = p.c.Call(ctx, "UpdateUser", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) GetUsers(ctx context.Context, offset int32, limit int32) (r []*rpc.User, err error) {
	var _args rpc.UserServiceGetUsersArgs
	_args.Offset = offset
	_args.Limit = limit
	var _result rpc.UserServiceGetUsersResult
	if err = p.c.Call(ctx, "GetUsers", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryUsersInBatches(ctx context.Context, ids []int64) (r []*rpc.User, err error) {
	var _args rpc.UserServiceQueryUsersInBatchesArgs
	_args.Ids = ids
	var _result rpc.UserServiceQueryUsersInBatchesResult
	if err = p.c.Call(ctx, "QueryUsersInBatches", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ResetPassword(ctx context.Context, id int64, password string) (err error) {
	var _args rpc.UserServiceResetPasswordArgs
	_args.Id = id
	_args.Password = password
	var _result rpc.UserServiceResetPasswordResult
	if err = p.c.Call(ctx, "ResetPassword", &_args, &_result); err != nil {
		return
	}
	return nil
}
