// Code generated by Kitex v0.6.1. DO NOT EDIT.

package cloudfileservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	rpc "github.com/yanguiyuan/cloudspace/pkg/rpc"
)

func serviceInfo() *kitex.ServiceInfo {
	return cloudFileServiceServiceInfo
}

var cloudFileServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "CloudFileService"
	handlerType := (*rpc.CloudFileService)(nil)
	methods := map[string]kitex.MethodInfo{
		"uploadFile":                  kitex.NewMethodInfo(uploadFileHandler, newCloudFileServiceUploadFileArgs, newCloudFileServiceUploadFileResult, false),
		"add":                         kitex.NewMethodInfo(addHandler, newCloudFileServiceAddArgs, newCloudFileServiceAddResult, false),
		"createDirectory":             kitex.NewMethodInfo(createDirectoryHandler, newCloudFileServiceCreateDirectoryArgs, newCloudFileServiceCreateDirectoryResult, false),
		"remove":                      kitex.NewMethodInfo(removeHandler, newCloudFileServiceRemoveArgs, newCloudFileServiceRemoveResult, false),
		"removeDirectory":             kitex.NewMethodInfo(removeDirectoryHandler, newCloudFileServiceRemoveDirectoryArgs, newCloudFileServiceRemoveDirectoryResult, false),
		"query":                       kitex.NewMethodInfo(queryHandler, newCloudFileServiceQueryArgs, newCloudFileServiceQueryResult, false),
		"queryFileItemByID":           kitex.NewMethodInfo(queryFileItemByIDHandler, newCloudFileServiceQueryFileItemByIDArgs, newCloudFileServiceQueryFileItemByIDResult, false),
		"update":                      kitex.NewMethodInfo(updateHandler, newCloudFileServiceUpdateArgs, newCloudFileServiceUpdateResult, false),
		"rename":                      kitex.NewMethodInfo(renameHandler, newCloudFileServiceRenameArgs, newCloudFileServiceRenameResult, false),
		"createFileItem":              kitex.NewMethodInfo(createFileItemHandler, newCloudFileServiceCreateFileItemArgs, newCloudFileServiceCreateFileItemResult, false),
		"createNamespace":             kitex.NewMethodInfo(createNamespaceHandler, newCloudFileServiceCreateNamespaceArgs, newCloudFileServiceCreateNamespaceResult, false),
		"createUserNamespace":         kitex.NewMethodInfo(createUserNamespaceHandler, newCloudFileServiceCreateUserNamespaceArgs, newCloudFileServiceCreateUserNamespaceResult, false),
		"getFileURL":                  kitex.NewMethodInfo(getFileURLHandler, newCloudFileServiceGetFileURLArgs, newCloudFileServiceGetFileURLResult, false),
		"queryUserNamespaces":         kitex.NewMethodInfo(queryUserNamespacesHandler, newCloudFileServiceQueryUserNamespacesArgs, newCloudFileServiceQueryUserNamespacesResult, false),
		"LinkNamespace":               kitex.NewMethodInfo(linkNamespaceHandler, newCloudFileServiceLinkNamespaceArgs, newCloudFileServiceLinkNamespaceResult, false),
		"getUserIDByFileID":           kitex.NewMethodInfo(getUserIDByFileIDHandler, newCloudFileServiceGetUserIDByFileIDArgs, newCloudFileServiceGetUserIDByFileIDResult, false),
		"fetchFileData":               kitex.NewMethodInfo(fetchFileDataHandler, newCloudFileServiceFetchFileDataArgs, newCloudFileServiceFetchFileDataResult, false),
		"modifyFileContent":           kitex.NewMethodInfo(modifyFileContentHandler, newCloudFileServiceModifyFileContentArgs, newCloudFileServiceModifyFileContentResult, false),
		"createTextFile":              kitex.NewMethodInfo(createTextFileHandler, newCloudFileServiceCreateTextFileArgs, newCloudFileServiceCreateTextFileResult, false),
		"getAuthority":                kitex.NewMethodInfo(getAuthorityHandler, newCloudFileServiceGetAuthorityArgs, newCloudFileServiceGetAuthorityResult, false),
		"queryUserNamespaceAuthority": kitex.NewMethodInfo(queryUserNamespaceAuthorityHandler, newCloudFileServiceQueryUserNamespaceAuthorityArgs, newCloudFileServiceQueryUserNamespaceAuthorityResult, false),
		"queryNamespaceUsers":         kitex.NewMethodInfo(queryNamespaceUsersHandler, newCloudFileServiceQueryNamespaceUsersArgs, newCloudFileServiceQueryNamespaceUsersResult, false),
		"removeNamespaceAuthority":    kitex.NewMethodInfo(removeNamespaceAuthorityHandler, newCloudFileServiceRemoveNamespaceAuthorityArgs, newCloudFileServiceRemoveNamespaceAuthorityResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "rpc",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.1",
		Extra:           extra,
	}
	return svcInfo
}

func uploadFileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.CloudFileServiceUploadFileArgs)
	realResult := result.(*rpc.CloudFileServiceUploadFileResult)
	success, err := handler.(rpc.CloudFileService).UploadFile(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCloudFileServiceUploadFileArgs() interface{} {
	return rpc.NewCloudFileServiceUploadFileArgs()
}

func newCloudFileServiceUploadFileResult() interface{} {
	return rpc.NewCloudFileServiceUploadFileResult()
}

func addHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.CloudFileServiceAddArgs)
	realResult := result.(*rpc.CloudFileServiceAddResult)
	success, err := handler.(rpc.CloudFileService).Add(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCloudFileServiceAddArgs() interface{} {
	return rpc.NewCloudFileServiceAddArgs()
}

func newCloudFileServiceAddResult() interface{} {
	return rpc.NewCloudFileServiceAddResult()
}

func createDirectoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.CloudFileServiceCreateDirectoryArgs)
	realResult := result.(*rpc.CloudFileServiceCreateDirectoryResult)
	success, err := handler.(rpc.CloudFileService).CreateDirectory(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCloudFileServiceCreateDirectoryArgs() interface{} {
	return rpc.NewCloudFileServiceCreateDirectoryArgs()
}

func newCloudFileServiceCreateDirectoryResult() interface{} {
	return rpc.NewCloudFileServiceCreateDirectoryResult()
}

func removeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.CloudFileServiceRemoveArgs)

	err := handler.(rpc.CloudFileService).Remove(ctx, realArg.Id)
	if err != nil {
		return err
	}

	return nil
}
func newCloudFileServiceRemoveArgs() interface{} {
	return rpc.NewCloudFileServiceRemoveArgs()
}

func newCloudFileServiceRemoveResult() interface{} {
	return rpc.NewCloudFileServiceRemoveResult()
}

func removeDirectoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.CloudFileServiceRemoveDirectoryArgs)

	err := handler.(rpc.CloudFileService).RemoveDirectory(ctx, realArg.Id)
	if err != nil {
		return err
	}

	return nil
}
func newCloudFileServiceRemoveDirectoryArgs() interface{} {
	return rpc.NewCloudFileServiceRemoveDirectoryArgs()
}

func newCloudFileServiceRemoveDirectoryResult() interface{} {
	return rpc.NewCloudFileServiceRemoveDirectoryResult()
}

func queryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.CloudFileServiceQueryArgs)
	realResult := result.(*rpc.CloudFileServiceQueryResult)
	success, err := handler.(rpc.CloudFileService).Query(ctx, realArg.Pid, realArg.Uid)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCloudFileServiceQueryArgs() interface{} {
	return rpc.NewCloudFileServiceQueryArgs()
}

func newCloudFileServiceQueryResult() interface{} {
	return rpc.NewCloudFileServiceQueryResult()
}

func queryFileItemByIDHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.CloudFileServiceQueryFileItemByIDArgs)
	realResult := result.(*rpc.CloudFileServiceQueryFileItemByIDResult)
	success, err := handler.(rpc.CloudFileService).QueryFileItemByID(ctx, realArg.Id)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCloudFileServiceQueryFileItemByIDArgs() interface{} {
	return rpc.NewCloudFileServiceQueryFileItemByIDArgs()
}

func newCloudFileServiceQueryFileItemByIDResult() interface{} {
	return rpc.NewCloudFileServiceQueryFileItemByIDResult()
}

func updateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.CloudFileServiceUpdateArgs)

	err := handler.(rpc.CloudFileService).Update(ctx, realArg.Req)
	if err != nil {
		return err
	}

	return nil
}
func newCloudFileServiceUpdateArgs() interface{} {
	return rpc.NewCloudFileServiceUpdateArgs()
}

func newCloudFileServiceUpdateResult() interface{} {
	return rpc.NewCloudFileServiceUpdateResult()
}

func renameHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.CloudFileServiceRenameArgs)

	err := handler.(rpc.CloudFileService).Rename(ctx, realArg.Id, realArg.NewName_)
	if err != nil {
		return err
	}

	return nil
}
func newCloudFileServiceRenameArgs() interface{} {
	return rpc.NewCloudFileServiceRenameArgs()
}

func newCloudFileServiceRenameResult() interface{} {
	return rpc.NewCloudFileServiceRenameResult()
}

func createFileItemHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.CloudFileServiceCreateFileItemArgs)
	realResult := result.(*rpc.CloudFileServiceCreateFileItemResult)
	success, err := handler.(rpc.CloudFileService).CreateFileItem(ctx, realArg.Name, realArg.Ty, realArg.ParentID, realArg.NamespaceID)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCloudFileServiceCreateFileItemArgs() interface{} {
	return rpc.NewCloudFileServiceCreateFileItemArgs()
}

func newCloudFileServiceCreateFileItemResult() interface{} {
	return rpc.NewCloudFileServiceCreateFileItemResult()
}

func createNamespaceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.CloudFileServiceCreateNamespaceArgs)
	realResult := result.(*rpc.CloudFileServiceCreateNamespaceResult)
	success, err := handler.(rpc.CloudFileService).CreateNamespace(ctx, realArg.Name)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newCloudFileServiceCreateNamespaceArgs() interface{} {
	return rpc.NewCloudFileServiceCreateNamespaceArgs()
}

func newCloudFileServiceCreateNamespaceResult() interface{} {
	return rpc.NewCloudFileServiceCreateNamespaceResult()
}

func createUserNamespaceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.CloudFileServiceCreateUserNamespaceArgs)

	err := handler.(rpc.CloudFileService).CreateUserNamespace(ctx, realArg.UserID, realArg.NamespaceID, realArg.Authority)
	if err != nil {
		return err
	}

	return nil
}
func newCloudFileServiceCreateUserNamespaceArgs() interface{} {
	return rpc.NewCloudFileServiceCreateUserNamespaceArgs()
}

func newCloudFileServiceCreateUserNamespaceResult() interface{} {
	return rpc.NewCloudFileServiceCreateUserNamespaceResult()
}

func getFileURLHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.CloudFileServiceGetFileURLArgs)
	realResult := result.(*rpc.CloudFileServiceGetFileURLResult)
	success, err := handler.(rpc.CloudFileService).GetFileURL(ctx, realArg.Id)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newCloudFileServiceGetFileURLArgs() interface{} {
	return rpc.NewCloudFileServiceGetFileURLArgs()
}

func newCloudFileServiceGetFileURLResult() interface{} {
	return rpc.NewCloudFileServiceGetFileURLResult()
}

func queryUserNamespacesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.CloudFileServiceQueryUserNamespacesArgs)
	realResult := result.(*rpc.CloudFileServiceQueryUserNamespacesResult)
	success, err := handler.(rpc.CloudFileService).QueryUserNamespaces(ctx, realArg.UserID)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCloudFileServiceQueryUserNamespacesArgs() interface{} {
	return rpc.NewCloudFileServiceQueryUserNamespacesArgs()
}

func newCloudFileServiceQueryUserNamespacesResult() interface{} {
	return rpc.NewCloudFileServiceQueryUserNamespacesResult()
}

func linkNamespaceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.CloudFileServiceLinkNamespaceArgs)

	err := handler.(rpc.CloudFileService).LinkNamespace(ctx, realArg.UserID, realArg.NamespaceID, realArg.Authority)
	if err != nil {
		return err
	}

	return nil
}
func newCloudFileServiceLinkNamespaceArgs() interface{} {
	return rpc.NewCloudFileServiceLinkNamespaceArgs()
}

func newCloudFileServiceLinkNamespaceResult() interface{} {
	return rpc.NewCloudFileServiceLinkNamespaceResult()
}

func getUserIDByFileIDHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.CloudFileServiceGetUserIDByFileIDArgs)
	realResult := result.(*rpc.CloudFileServiceGetUserIDByFileIDResult)
	success, err := handler.(rpc.CloudFileService).GetUserIDByFileID(ctx, realArg.Id)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newCloudFileServiceGetUserIDByFileIDArgs() interface{} {
	return rpc.NewCloudFileServiceGetUserIDByFileIDArgs()
}

func newCloudFileServiceGetUserIDByFileIDResult() interface{} {
	return rpc.NewCloudFileServiceGetUserIDByFileIDResult()
}

func fetchFileDataHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.CloudFileServiceFetchFileDataArgs)
	realResult := result.(*rpc.CloudFileServiceFetchFileDataResult)
	success, err := handler.(rpc.CloudFileService).FetchFileData(ctx, realArg.Id)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCloudFileServiceFetchFileDataArgs() interface{} {
	return rpc.NewCloudFileServiceFetchFileDataArgs()
}

func newCloudFileServiceFetchFileDataResult() interface{} {
	return rpc.NewCloudFileServiceFetchFileDataResult()
}

func modifyFileContentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.CloudFileServiceModifyFileContentArgs)

	err := handler.(rpc.CloudFileService).ModifyFileContent(ctx, realArg.Id, realArg.Content)
	if err != nil {
		return err
	}

	return nil
}
func newCloudFileServiceModifyFileContentArgs() interface{} {
	return rpc.NewCloudFileServiceModifyFileContentArgs()
}

func newCloudFileServiceModifyFileContentResult() interface{} {
	return rpc.NewCloudFileServiceModifyFileContentResult()
}

func createTextFileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.CloudFileServiceCreateTextFileArgs)
	realResult := result.(*rpc.CloudFileServiceCreateTextFileResult)
	success, err := handler.(rpc.CloudFileService).CreateTextFile(ctx, realArg.Name, realArg.ParentID, realArg.Content, realArg.NamespaceID)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCloudFileServiceCreateTextFileArgs() interface{} {
	return rpc.NewCloudFileServiceCreateTextFileArgs()
}

func newCloudFileServiceCreateTextFileResult() interface{} {
	return rpc.NewCloudFileServiceCreateTextFileResult()
}

func getAuthorityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.CloudFileServiceGetAuthorityArgs)
	realResult := result.(*rpc.CloudFileServiceGetAuthorityResult)
	success, err := handler.(rpc.CloudFileService).GetAuthority(ctx, realArg.UserID, realArg.FileID)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newCloudFileServiceGetAuthorityArgs() interface{} {
	return rpc.NewCloudFileServiceGetAuthorityArgs()
}

func newCloudFileServiceGetAuthorityResult() interface{} {
	return rpc.NewCloudFileServiceGetAuthorityResult()
}

func queryUserNamespaceAuthorityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.CloudFileServiceQueryUserNamespaceAuthorityArgs)
	realResult := result.(*rpc.CloudFileServiceQueryUserNamespaceAuthorityResult)
	success, err := handler.(rpc.CloudFileService).QueryUserNamespaceAuthority(ctx, realArg.UserID, realArg.NamespaceID)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newCloudFileServiceQueryUserNamespaceAuthorityArgs() interface{} {
	return rpc.NewCloudFileServiceQueryUserNamespaceAuthorityArgs()
}

func newCloudFileServiceQueryUserNamespaceAuthorityResult() interface{} {
	return rpc.NewCloudFileServiceQueryUserNamespaceAuthorityResult()
}

func queryNamespaceUsersHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.CloudFileServiceQueryNamespaceUsersArgs)
	realResult := result.(*rpc.CloudFileServiceQueryNamespaceUsersResult)
	success, err := handler.(rpc.CloudFileService).QueryNamespaceUsers(ctx, realArg.NamespaceID)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCloudFileServiceQueryNamespaceUsersArgs() interface{} {
	return rpc.NewCloudFileServiceQueryNamespaceUsersArgs()
}

func newCloudFileServiceQueryNamespaceUsersResult() interface{} {
	return rpc.NewCloudFileServiceQueryNamespaceUsersResult()
}

func removeNamespaceAuthorityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.CloudFileServiceRemoveNamespaceAuthorityArgs)

	err := handler.(rpc.CloudFileService).RemoveNamespaceAuthority(ctx, realArg.UserID, realArg.NamespaceID)
	if err != nil {
		return err
	}

	return nil
}
func newCloudFileServiceRemoveNamespaceAuthorityArgs() interface{} {
	return rpc.NewCloudFileServiceRemoveNamespaceAuthorityArgs()
}

func newCloudFileServiceRemoveNamespaceAuthorityResult() interface{} {
	return rpc.NewCloudFileServiceRemoveNamespaceAuthorityResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) UploadFile(ctx context.Context, req *rpc.UploadFileRequest) (r *rpc.CloudFileItem, err error) {
	var _args rpc.CloudFileServiceUploadFileArgs
	_args.Req = req
	var _result rpc.CloudFileServiceUploadFileResult
	if err = p.c.Call(ctx, "uploadFile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Add(ctx context.Context, req *rpc.AddRequest) (r *rpc.CloudFileItem, err error) {
	var _args rpc.CloudFileServiceAddArgs
	_args.Req = req
	var _result rpc.CloudFileServiceAddResult
	if err = p.c.Call(ctx, "add", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateDirectory(ctx context.Context, req *rpc.CreateDirectoryRequest) (r *rpc.CloudFileItem, err error) {
	var _args rpc.CloudFileServiceCreateDirectoryArgs
	_args.Req = req
	var _result rpc.CloudFileServiceCreateDirectoryResult
	if err = p.c.Call(ctx, "createDirectory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Remove(ctx context.Context, id string) (err error) {
	var _args rpc.CloudFileServiceRemoveArgs
	_args.Id = id
	var _result rpc.CloudFileServiceRemoveResult
	if err = p.c.Call(ctx, "remove", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) RemoveDirectory(ctx context.Context, id string) (err error) {
	var _args rpc.CloudFileServiceRemoveDirectoryArgs
	_args.Id = id
	var _result rpc.CloudFileServiceRemoveDirectoryResult
	if err = p.c.Call(ctx, "removeDirectory", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) Query(ctx context.Context, pid string, uid int64) (r *rpc.QueryResponse, err error) {
	var _args rpc.CloudFileServiceQueryArgs
	_args.Pid = pid
	_args.Uid = uid
	var _result rpc.CloudFileServiceQueryResult
	if err = p.c.Call(ctx, "query", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryFileItemByID(ctx context.Context, id string) (r *rpc.CloudFileItem, err error) {
	var _args rpc.CloudFileServiceQueryFileItemByIDArgs
	_args.Id = id
	var _result rpc.CloudFileServiceQueryFileItemByIDResult
	if err = p.c.Call(ctx, "queryFileItemByID", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Update(ctx context.Context, req *rpc.UpdateRequest) (err error) {
	var _args rpc.CloudFileServiceUpdateArgs
	_args.Req = req
	var _result rpc.CloudFileServiceUpdateResult
	if err = p.c.Call(ctx, "update", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) Rename(ctx context.Context, id string, newName_ string) (err error) {
	var _args rpc.CloudFileServiceRenameArgs
	_args.Id = id
	_args.NewName_ = newName_
	var _result rpc.CloudFileServiceRenameResult
	if err = p.c.Call(ctx, "rename", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) CreateFileItem(ctx context.Context, name string, ty string, parentID string, namespaceID int64) (r *rpc.CloudFileItem, err error) {
	var _args rpc.CloudFileServiceCreateFileItemArgs
	_args.Name = name
	_args.Ty = ty
	_args.ParentID = parentID
	_args.NamespaceID = namespaceID
	var _result rpc.CloudFileServiceCreateFileItemResult
	if err = p.c.Call(ctx, "createFileItem", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateNamespace(ctx context.Context, name string) (r int64, err error) {
	var _args rpc.CloudFileServiceCreateNamespaceArgs
	_args.Name = name
	var _result rpc.CloudFileServiceCreateNamespaceResult
	if err = p.c.Call(ctx, "createNamespace", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateUserNamespace(ctx context.Context, userID int64, namespaceID int64, authority int32) (err error) {
	var _args rpc.CloudFileServiceCreateUserNamespaceArgs
	_args.UserID = userID
	_args.NamespaceID = namespaceID
	_args.Authority = authority
	var _result rpc.CloudFileServiceCreateUserNamespaceResult
	if err = p.c.Call(ctx, "createUserNamespace", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) GetFileURL(ctx context.Context, id string) (r string, err error) {
	var _args rpc.CloudFileServiceGetFileURLArgs
	_args.Id = id
	var _result rpc.CloudFileServiceGetFileURLResult
	if err = p.c.Call(ctx, "getFileURL", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryUserNamespaces(ctx context.Context, userID int64) (r []*rpc.Namespace, err error) {
	var _args rpc.CloudFileServiceQueryUserNamespacesArgs
	_args.UserID = userID
	var _result rpc.CloudFileServiceQueryUserNamespacesResult
	if err = p.c.Call(ctx, "queryUserNamespaces", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LinkNamespace(ctx context.Context, userID int64, namespaceID int64, authority int32) (err error) {
	var _args rpc.CloudFileServiceLinkNamespaceArgs
	_args.UserID = userID
	_args.NamespaceID = namespaceID
	_args.Authority = authority
	var _result rpc.CloudFileServiceLinkNamespaceResult
	if err = p.c.Call(ctx, "LinkNamespace", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) GetUserIDByFileID(ctx context.Context, id string) (r int64, err error) {
	var _args rpc.CloudFileServiceGetUserIDByFileIDArgs
	_args.Id = id
	var _result rpc.CloudFileServiceGetUserIDByFileIDResult
	if err = p.c.Call(ctx, "getUserIDByFileID", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FetchFileData(ctx context.Context, id string) (r []byte, err error) {
	var _args rpc.CloudFileServiceFetchFileDataArgs
	_args.Id = id
	var _result rpc.CloudFileServiceFetchFileDataResult
	if err = p.c.Call(ctx, "fetchFileData", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ModifyFileContent(ctx context.Context, id string, content string) (err error) {
	var _args rpc.CloudFileServiceModifyFileContentArgs
	_args.Id = id
	_args.Content = content
	var _result rpc.CloudFileServiceModifyFileContentResult
	if err = p.c.Call(ctx, "modifyFileContent", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) CreateTextFile(ctx context.Context, name string, parentID string, content string, namespaceID int64) (r *rpc.CloudFileItem, err error) {
	var _args rpc.CloudFileServiceCreateTextFileArgs
	_args.Name = name
	_args.ParentID = parentID
	_args.Content = content
	_args.NamespaceID = namespaceID
	var _result rpc.CloudFileServiceCreateTextFileResult
	if err = p.c.Call(ctx, "createTextFile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetAuthority(ctx context.Context, userID int64, fileID string) (r int32, err error) {
	var _args rpc.CloudFileServiceGetAuthorityArgs
	_args.UserID = userID
	_args.FileID = fileID
	var _result rpc.CloudFileServiceGetAuthorityResult
	if err = p.c.Call(ctx, "getAuthority", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryUserNamespaceAuthority(ctx context.Context, userID int64, namespaceID int64) (r int32, err error) {
	var _args rpc.CloudFileServiceQueryUserNamespaceAuthorityArgs
	_args.UserID = userID
	_args.NamespaceID = namespaceID
	var _result rpc.CloudFileServiceQueryUserNamespaceAuthorityResult
	if err = p.c.Call(ctx, "queryUserNamespaceAuthority", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryNamespaceUsers(ctx context.Context, namespaceID int64) (r []*rpc.NamespaceUser, err error) {
	var _args rpc.CloudFileServiceQueryNamespaceUsersArgs
	_args.NamespaceID = namespaceID
	var _result rpc.CloudFileServiceQueryNamespaceUsersResult
	if err = p.c.Call(ctx, "queryNamespaceUsers", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RemoveNamespaceAuthority(ctx context.Context, userID int64, namespaceID int64) (err error) {
	var _args rpc.CloudFileServiceRemoveNamespaceAuthorityArgs
	_args.UserID = userID
	_args.NamespaceID = namespaceID
	var _result rpc.CloudFileServiceRemoveNamespaceAuthorityResult
	if err = p.c.Call(ctx, "removeNamespaceAuthority", &_args, &_result); err != nil {
		return
	}
	return nil
}
