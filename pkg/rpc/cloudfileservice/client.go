// Code generated by Kitex v0.6.1. DO NOT EDIT.

package cloudfileservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	rpc "github.com/yanguiyuan/cloudspace/pkg/rpc"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	UploadFile(ctx context.Context, req *rpc.UploadFileRequest, callOptions ...callopt.Option) (r *rpc.CloudFileItem, err error)
	Add(ctx context.Context, req *rpc.AddRequest, callOptions ...callopt.Option) (r *rpc.CloudFileItem, err error)
	CreateDirectory(ctx context.Context, req *rpc.CreateDirectoryRequest, callOptions ...callopt.Option) (r *rpc.CloudFileItem, err error)
	Remove(ctx context.Context, id string, callOptions ...callopt.Option) (err error)
	RemoveDirectory(ctx context.Context, id string, callOptions ...callopt.Option) (err error)
	Query(ctx context.Context, pid string, uid int64, callOptions ...callopt.Option) (r *rpc.QueryResponse, err error)
	QueryFileItemByID(ctx context.Context, id string, callOptions ...callopt.Option) (r *rpc.CloudFileItem, err error)
	Update(ctx context.Context, req *rpc.UpdateRequest, callOptions ...callopt.Option) (err error)
	Rename(ctx context.Context, id string, newName_ string, callOptions ...callopt.Option) (err error)
	CreateFileItem(ctx context.Context, name string, ty string, parentID string, namespaceID int64, callOptions ...callopt.Option) (r *rpc.CloudFileItem, err error)
	CreateNamespace(ctx context.Context, name string, callOptions ...callopt.Option) (r int64, err error)
	CreateUserNamespace(ctx context.Context, userID int64, namespaceID int64, authority int32, callOptions ...callopt.Option) (err error)
	GetFileURL(ctx context.Context, id string, callOptions ...callopt.Option) (r string, err error)
	QueryUserNamespaces(ctx context.Context, userID int64, callOptions ...callopt.Option) (r []*rpc.Namespace, err error)
	LinkNamespace(ctx context.Context, userID int64, namespaceID int64, authority int32, callOptions ...callopt.Option) (err error)
	GetUserIDByFileID(ctx context.Context, id string, callOptions ...callopt.Option) (r int64, err error)
	FetchFileData(ctx context.Context, id string, callOptions ...callopt.Option) (r []byte, err error)
	ModifyFileContent(ctx context.Context, id string, content string, callOptions ...callopt.Option) (err error)
	CreateTextFile(ctx context.Context, name string, parentID string, content string, namespaceID int64, callOptions ...callopt.Option) (r *rpc.CloudFileItem, err error)
	GetAuthority(ctx context.Context, userID int64, fileID string, callOptions ...callopt.Option) (r int32, err error)
	QueryUserNamespaceAuthority(ctx context.Context, userID int64, namespaceID int64, callOptions ...callopt.Option) (r int32, err error)
	QueryNamespaceUsers(ctx context.Context, namespaceID int64, callOptions ...callopt.Option) (r []*rpc.NamespaceUser, err error)
	RemoveNamespaceAuthority(ctx context.Context, userID int64, namespaceID int64, callOptions ...callopt.Option) (err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kCloudFileServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kCloudFileServiceClient struct {
	*kClient
}

func (p *kCloudFileServiceClient) UploadFile(ctx context.Context, req *rpc.UploadFileRequest, callOptions ...callopt.Option) (r *rpc.CloudFileItem, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UploadFile(ctx, req)
}

func (p *kCloudFileServiceClient) Add(ctx context.Context, req *rpc.AddRequest, callOptions ...callopt.Option) (r *rpc.CloudFileItem, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Add(ctx, req)
}

func (p *kCloudFileServiceClient) CreateDirectory(ctx context.Context, req *rpc.CreateDirectoryRequest, callOptions ...callopt.Option) (r *rpc.CloudFileItem, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateDirectory(ctx, req)
}

func (p *kCloudFileServiceClient) Remove(ctx context.Context, id string, callOptions ...callopt.Option) (err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Remove(ctx, id)
}

func (p *kCloudFileServiceClient) RemoveDirectory(ctx context.Context, id string, callOptions ...callopt.Option) (err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RemoveDirectory(ctx, id)
}

func (p *kCloudFileServiceClient) Query(ctx context.Context, pid string, uid int64, callOptions ...callopt.Option) (r *rpc.QueryResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Query(ctx, pid, uid)
}

func (p *kCloudFileServiceClient) QueryFileItemByID(ctx context.Context, id string, callOptions ...callopt.Option) (r *rpc.CloudFileItem, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.QueryFileItemByID(ctx, id)
}

func (p *kCloudFileServiceClient) Update(ctx context.Context, req *rpc.UpdateRequest, callOptions ...callopt.Option) (err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Update(ctx, req)
}

func (p *kCloudFileServiceClient) Rename(ctx context.Context, id string, newName_ string, callOptions ...callopt.Option) (err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Rename(ctx, id, newName_)
}

func (p *kCloudFileServiceClient) CreateFileItem(ctx context.Context, name string, ty string, parentID string, namespaceID int64, callOptions ...callopt.Option) (r *rpc.CloudFileItem, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateFileItem(ctx, name, ty, parentID, namespaceID)
}

func (p *kCloudFileServiceClient) CreateNamespace(ctx context.Context, name string, callOptions ...callopt.Option) (r int64, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateNamespace(ctx, name)
}

func (p *kCloudFileServiceClient) CreateUserNamespace(ctx context.Context, userID int64, namespaceID int64, authority int32, callOptions ...callopt.Option) (err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateUserNamespace(ctx, userID, namespaceID, authority)
}

func (p *kCloudFileServiceClient) GetFileURL(ctx context.Context, id string, callOptions ...callopt.Option) (r string, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFileURL(ctx, id)
}

func (p *kCloudFileServiceClient) QueryUserNamespaces(ctx context.Context, userID int64, callOptions ...callopt.Option) (r []*rpc.Namespace, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.QueryUserNamespaces(ctx, userID)
}

func (p *kCloudFileServiceClient) LinkNamespace(ctx context.Context, userID int64, namespaceID int64, authority int32, callOptions ...callopt.Option) (err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.LinkNamespace(ctx, userID, namespaceID, authority)
}

func (p *kCloudFileServiceClient) GetUserIDByFileID(ctx context.Context, id string, callOptions ...callopt.Option) (r int64, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUserIDByFileID(ctx, id)
}

func (p *kCloudFileServiceClient) FetchFileData(ctx context.Context, id string, callOptions ...callopt.Option) (r []byte, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FetchFileData(ctx, id)
}

func (p *kCloudFileServiceClient) ModifyFileContent(ctx context.Context, id string, content string, callOptions ...callopt.Option) (err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ModifyFileContent(ctx, id, content)
}

func (p *kCloudFileServiceClient) CreateTextFile(ctx context.Context, name string, parentID string, content string, namespaceID int64, callOptions ...callopt.Option) (r *rpc.CloudFileItem, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateTextFile(ctx, name, parentID, content, namespaceID)
}

func (p *kCloudFileServiceClient) GetAuthority(ctx context.Context, userID int64, fileID string, callOptions ...callopt.Option) (r int32, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetAuthority(ctx, userID, fileID)
}

func (p *kCloudFileServiceClient) QueryUserNamespaceAuthority(ctx context.Context, userID int64, namespaceID int64, callOptions ...callopt.Option) (r int32, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.QueryUserNamespaceAuthority(ctx, userID, namespaceID)
}

func (p *kCloudFileServiceClient) QueryNamespaceUsers(ctx context.Context, namespaceID int64, callOptions ...callopt.Option) (r []*rpc.NamespaceUser, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.QueryNamespaceUsers(ctx, namespaceID)
}

func (p *kCloudFileServiceClient) RemoveNamespaceAuthority(ctx context.Context, userID int64, namespaceID int64, callOptions ...callopt.Option) (err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RemoveNamespaceAuthority(ctx, userID, namespaceID)
}
